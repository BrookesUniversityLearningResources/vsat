---
import PublishedStorySummaryView from "@components/story/published/PublishedStorySummary/PublishedStorySummary.astro";
import FeaturedStories from "@components/story/published/featured/FeaturedStories.astro";

import {
  type FeaturedStorySummary,
  type PublishedStorySummary,
  isFeaturedStorySummary,
} from "@domain/index";
import { isNonEmptyArray } from "@util/nonEmptyArray";
import Layout from "../../layouts/PublicSiteLayout.astro";

const { i18n, repositoryStory } = Astro.locals.environment<
  App.WithI18N & App.WithStoryRepository
>();

const allStories = await repositoryStory.getPublishedStorySummaries({});

const { featuredStories, otherStories } = allStories.reduce(
  (all, story) => {
    if (isFeaturedStorySummary(story)) {
      all.featuredStories.push(story);
    } else {
      all.otherStories.push(story);
    }

    return all;
  },
  { featuredStories: [], otherStories: [] } as {
    featuredStories: FeaturedStorySummary[];
    otherStories: PublishedStorySummary[];
  },
);
---

<Layout
  title={i18n.t("page.site-stories.meta.title")}
  description={i18n.t("page.site-stories.meta.description")}
  pageName={"site-stories"}
>
  <header>
    <h1>{i18n.t("page.site-stories.heading.title")}</h1>
    <div class="strapline">{i18n.t("page.site-stories.heading.strapline")}</div>
  </header>
  <main class="stories">
    {
      isNonEmptyArray(featuredStories) && (
        <FeaturedStories stories={featuredStories} />
      )
    }

    <div class="published">
      {otherStories.map((story) => <PublishedStorySummaryView story={story} />)}
    </div>
  </main>
</Layout>

<style>
  body {
    text-align: center;

    @media screen and (min-width: 1000px) {
      max-width: 75%;
      text-align: unset;
    }
  }

  header {
    margin: 1rem;

    .strapline {
      margin-top: 0.5rem;
      font-size: 1.5rem;
      font-style: italic;
    }
  }

  .stories {
    display: grid;
    gap: 2rem;
    justify-content: center;
    margin-bottom: 1rem;

    .published {
      width: 1000px;
      margin: var(--margin);
      display: grid;
      gap: 2rem;
      justify-content: center;
    }

    @media screen and (min-width: 500px) {
      .published {
        grid-template-columns: 25rem 25rem;
      }
    }

    @media screen and (min-width: 1000px) {
      .published {
        grid-template-columns: 25rem 25rem 25rem;
      }
    }
  }
</style>
