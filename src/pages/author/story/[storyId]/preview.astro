---
import PublishedStory from "@components/story/published/PublishedStory";
import { ErrorCodes } from "@domain/error/errorCode";
import imageUrlFor from "@domain/story/publish/imageUrlFor";
import parseStory from "@domain/story/publish/parseStory";
import toStoryId from "@domain/story/toStoryId";

const storyId = toStoryId(Astro.params.storyId);

if (!storyId) {
  return Astro.redirect(`/author/story?err=${ErrorCodes.StoryNotFound}`);
}

const { i18n, repositoryStory } = Astro.locals.environment<
  App.WithI18N & App.WithStoryRepository
>();

const story = await repositoryStory.getStory({
  id: storyId,
});

if (!story) {
  return Astro.redirect(`/author/story?err=${ErrorCodes.StoryNotFound}`);
}

const parseResult = parseStory(story);

if (parseResult.kind !== "storyParsed") {
  return Astro.redirect(`/author/story?err=${ErrorCodes.UnableToPublishStory}`);
}

const publishedStory = {
  ...parseResult.story,
  createdAt: new Date(),
  imageUrl: imageUrlFor(story),
};

const translations = i18n.getTranslationsForPage({
  locale: Astro.preferredLocale,
  page: "preview",
});
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <title>
      {i18n.t("page.preview.meta.title", { title: story.title })}
    </title>
    <meta
      name="description"
      content={i18n.t("page.preview.meta.description", {
        author: story.author.name,
      })}
    />
    <link rel="stylesheet" href="/styles/site-public.css" />
  </head>
  <body>
    <main>
      <PublishedStory
        story={publishedStory}
        translations={translations}
        client:only="react"
      />
    </main>
  </body>
</html>
